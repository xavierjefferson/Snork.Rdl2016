using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Snork.Rdl2016
{
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 


    /// <remarks />
    [GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = Constants.Namespace)]
    [XmlRoot(Namespace = Constants.Namespace, IsNullable = false)]
    public class Report
    {
        /// <remarks />
        [XmlElement("Author", typeof(string))]
        public string Author { get; set; }

        [XmlElement("AutoRefresh", typeof(string))]
        public string AutoRefresh { get; set; }

        [XmlElement("Classes", typeof(ClassesType))]
        public List<ClassesType> Classes { get; set; } = new List<ClassesType>();

        [XmlElement("Code", typeof(string))]
        public string Code { get; set; }

        [XmlElement("CodeModules", typeof(CodeModulesType))]
        public List<CodeModulesType> CodeModules { get; set; } = new List<CodeModulesType>();

        [XmlElement("ConsumeContainerWhitespace", typeof(bool))]
        public bool ConsumeContainerWhitespace { get; set; }

        [XmlElement("CustomProperties", typeof(CustomPropertiesType))]
        public List<CustomPropertiesType> CustomProperties { get; set; } = new List<CustomPropertiesType>();

        [XmlElement("DataElementName", typeof(string))]
        public string DataElementName { get; set; }

        [XmlElement("DataElementStyle", typeof(ReportDataElementStyle))]
        public ReportDataElementStyle DataElementStyle { get; set; }

        [XmlElement("DataSchema", typeof(string))]
        public string DataSchema { get; set; }

        [XmlArray("DataSets")]
        [XmlArrayItem("DataSet", typeof(DataSetType))]
        public List<DataSetType> DataSets { get; set; } = new List<DataSetType>();


        [XmlArray("DataSources")]
        [XmlArrayItem("DataSource", typeof(DataSourceType))]
        public List<DataSourceType> DataSources { get; set; } = new List<DataSourceType>();


        [XmlElement("DataTransform", typeof(string))]
        public string DataTransform { get; set; }

        [XmlElement("DefaultFontFamily", typeof(string))]
        public string DefaultFontFamily { get; set; }

        [XmlElement("DeferVariableEvaluation", typeof(bool))]
        public bool DeferVariableEvaluation { get; set; }

        [XmlElement("Description", typeof(StringLocIDType))]
        public StringLocIDType Description { get; set; }

        [XmlArray("EmbeddedImages")]
        [XmlArrayItem("EmbeddedImage", typeof(EmbeddedImageType))]
        public List<EmbeddedImageType> EmbeddedImages { get; set; } = new List<EmbeddedImageType>();


        [XmlElement("InitialPageName", typeof(string))]
        public string InitialPageName { get; set; }

        [XmlElement("Language", typeof(string))]
        public string Language { get; set; }

        [XmlArray("ReportParameters")]
        [XmlArrayItem("ReportParameter", typeof(ReportParameterType))]
        public List<ReportParameterType> ReportParameters { get; set; } = new List<ReportParameterType>();

        [XmlElement("ReportParametersLayout", typeof(ReportParametersLayoutType))]
        public ReportParametersLayoutType ReportParametersLayout { get; set; }

        [XmlArray("ReportSections")]
        [XmlArrayItem("ReportSection", typeof(ReportSectionType))]
        public List<ReportSectionType> ReportSections { get; set; } = new List<ReportSectionType>();


        [XmlArray("Variables")]
        [XmlArrayItem("Variable", typeof(VariableType))]
        public List<VariableType> Variables { get; set; } = new List<VariableType>();



        /// <remarks />
        [XmlAttribute(DataType = "token")]
        public List<string> MustUnderstand { get; set; }
    }
}
